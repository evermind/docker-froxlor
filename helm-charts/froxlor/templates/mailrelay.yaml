{{- if .Values.mailrelay.enabled }}

{{ if .Capabilities.APIVersions.Has "apps/v1/Deployment" }}
apiVersion: apps/v1
{{ else }}
apiVersion: extensions/v1beta1
{{ end }}
kind: Deployment
metadata:
  name: {{ include "froxlor.fullname" . }}-mailrelay
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ include "froxlor.fullname" . }}
      component: mailrelay
  template:
    metadata:
      labels:
        app: {{ include "froxlor.fullname" . }}
        component: mailrelay
      {{- if .Values.pipework.enabled }}
      annotations:
        {{- $gateway := (required "pipework.gateway" .Values.pipework.gateway) }}
        {{- $bridge := (required "pipework.bridge" .Values.pipework.bridge) }}
        {{- range $index, $ip := (required "pipework.ips" .Values.pipework.ips) }}
          pipework_cmd_ip{{ $index }}: "{{ $bridge }} -i ip{{ $index }} @CONTAINER_NAME@ {{ $ip }}/32{{- if (eq $index 0) }}@{{ $gateway }}{{ end }}"
        {{- end }}
        {{- range $index, $route := (required "pipework.staticRoutes" .Values.pipework.staticRoutes) }}
          pipework_cmd_route{{ $index }}: "route @CONTAINER_NAME@ add {{ required "route.net" $route.net }} via {{ required "route-gateway" $route.gateway }}"
        {{- end }}
      {{- end }}
    spec:
      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
      {{- if .Values.pipework.enabled }}
      initContainers:
        - image: kvaps/pipework:v1.0.0
          name: pipework-wait
          command:
            - /bin/sh
            - -ce
            - |
            {{- range $index, $ip := (required "pipework.ips" .Values.pipework.ips) }}
              echo "Waiting for ip {{ $ip }} at interface ip{{ $index }}"
              pipework --wait -i ip{{ $index }}
              echo "ok"
            {{- end }}
              echo "All interfaces are up now."
      {{- end }}
      containers:
      - name: mailrelay
        image: {{ .Values.mailrelay.image.repository }}:{{ .Values.mailrelay.image.tag }}
        imagePullPolicy: {{ .Values.froxlor.image.pullPolicy }}
        env:
        - name: MAIL_HOSTNAME
          value: "{{ required "mailrelay.hostname" .Values.mailrelay.hostname }}"
        {{ with .Values.mailrelay.smarthost }}
        {{ if .host }}
        - name: SMARTHOST 
          value: {{ .host }}
        {{ end }}  
        {{ if .port }}
        - name: SMARTHOST_PORT
          value: {{ .port | quote }}
        {{ end }}
        {{ if .tls.enabled }}
        - name: SMARTHOST_TLS
          value: {{ .tls.enabled | quote }}
        {{ end }}
        {{ if .username }}
        - name: SMARTHOST_USERNAME 
          value: {{ .username }}
        {{ end }}
        {{ if .password }} 
        - name: SMARTHOST_PASSWORD 
          value: {{ .password }}
        {{ end }}
        {{ end }}
        livenessProbe:
          tcpSocket:
            port: 25
          periodSeconds: 10
          failureThreshold: 6
          successThreshold: 1
        readinessProbe:
          tcpSocket:
            port: 25
          periodSeconds: 10
          failureThreshold: 1
          successThreshold: 1
        volumeMounts:
        - name: data
          subPath: mailrelay-spool
          mountPath: /var/spool/exim
        - name: data
          subPath: log
          mountPath: /var/log
        ports:
        - name: smtp
          containerPort: 25
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: {{ include "froxlor.fullname" . }}-storage
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1

---

apiVersion: v1
kind: Service
metadata:
  name: {{ include "froxlor.fullname" . }}-mailrelay
  labels:
    app: {{ include "froxlor.fullname" . }}
    component: mailrelay
spec:
  selector:
    app: {{ include "froxlor.fullname" . }}
    component: mailrelay
  ports:
  - name: smtp
    port: 25
    protocol: TCP
{{- end }}